import requests
import json
from app.config import DEEPSEEK_API_KEY, DEEPSEEK_API_BASE, DEEPSEEK_MODEL

def generate_text(prompt_template: str, data: dict) -> str:
    """
    Generates text by calling the DeepSeek LLM API.

    Args:
        prompt_template: The prompt template with placeholders for data.
                         Example: "Generate an outline for a book titled {title}."
        data: A dictionary containing data to be inserted into the prompt.
              Example: {"title": "The Hitchhiker's Guide to the Galaxy"}

    Returns:
        The text content generated by the model.
        
    Raises:
        Exception: If the API call fails.
    """
    # Replace placeholders in the prompt template with data
    prompt = prompt_template.format(**data)

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
    }

    payload = {
        "model": DEEPSEEK_MODEL,
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "stream": False,
    }

    try:
        response = requests.post(DEEPSEEK_API_BASE, headers=headers, json=payload)
        response.raise_for_status()  # Raise an exception for bad status codes (4xx or 5xx)
        
        result = response.json()
        
        if result.get("choices") and len(result["choices"]) > 0:
            return result["choices"][0]["message"]["content"]
        else:
            raise Exception("Invalid response format from LLM API")

    except requests.exceptions.RequestException as e:
        # Handle network-related errors
        raise Exception(f"API request failed: {e}")
    except Exception as e:
        # Handle other errors, including JSON decoding or invalid response
        raise Exception(f"An error occurred: {e}") 